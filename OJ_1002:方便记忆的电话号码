题目描述
#####################################BEGIN
描述
英文字母（除Q和Z外）和电话号码存在着对应关系，如下所示：
A,B,C -> 2
D,E,F -> 3
G,H,I -> 4
J,K,L -> 5
M,N,O -> 6
P,R,S -> 7
T,U,V -> 8
W,X,Y -> 9
标准的电话号码格式是xxx-xxxx，其中x表示0-9中的一个数字。有时为了方便记忆电话号码，我们会将电话号码的数字转变为英文字母，如把263-7422记成America。有时，我们还加上“-”作为分隔符，如把449-6753记成Hi-World。当然，我们未必要将所有的数字都转变为字母，比如474-6635可以记成iPhone-5。
总之，一个方便记忆的电话号码由数字和除Q、Z外的英文字母组成，并且可以在任意位置插入任意多的“-”符号。
现在 ，我们有一个列表，记录着许多方便记忆的电话号码。不同的方便记忆的电话号码可能对应相同的标准号码，你的任务就是找出它们。

输入
第一行是一个正整数n（n <= 100000），表示列表中的电话号码数。
其后n行，每行是一个方便记忆的电话号码，它由数字和除Q、Z外的英文字母、“-”符号组成，其中数字和字母的总数一定为7，字符串总长度不超过200。
输出
输出包括若干行，每行包括一个标准电话号码（xxx-xxxx）以及它重复出现的次数k（k >= 2），中间用空格分隔。输出的标准电话号码需按照升序排序。

如果没有重复出现的标准电话号码，则输出一行“No duplicates.”。
#####################################END

代码展示
#####################################BEGIN
#include<iostream>
#include<cstring>
#include<algorithm>
using namespace std;
#define MAX 100000000
#define NUM 100000+1

int f[MAX] = {0},Index[NUM] = {0};
int char2int[26] = {2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9};
string s1;
int flag=0, n, num, max_num = 0;
int mod[4]={1000000,100000,10000,1000};

int main()
{
	cin >> n;
	int cnt = 0;
	while(n--)
	{
		cin >> s1;
		num = 0;
		for(int i = 0; i < s1.length(); i++)
		{
			if(s1[i] >= '0' && s1[i] <= '9')
				num = num*10 + (s1[i] - '0');
			if(s1[i] >= 'A' && s1[i] <= 'Z')
				num = num*10 + (char2int[s1[i] - 'A']); 
		}
		if(!f[num])Index[cnt++] = num;
		f[num]++;
	}
	
	sort(Index, Index + cnt);
	
	for(int i = 0; i < cnt; i++)
	if(f[Index[i]] >= 2){
		num = Index[i];
		flag = 1;	
		cout << num/mod[0] << num/mod[1]%10 << num/mod[2]%10 << "-" << num%mod[2]/1000 << num%mod[3]/100 << num%100/10 << num%10 << " " << f[num] << endl;
	}
	if(!flag) cout << "No duplicates." << endl;
  return 0;
}
#####################################END
